//**********************************************************************`
//* This is an include file generated by Message Compiler.             *`
//*                                                                    *`
//* Copyright (c) Microsoft Corporation. All Rights Reserved.          *`
//**********************************************************************`
#pragma once
#include <wmistr.h>
#include <evntrace.h>
#include "evntprov.h"
//
//  Initial Defs
//
#if !defined(ETW_INLINE)
#define ETW_INLINE DECLSPEC_NOINLINE __inline
#endif

#if defined(__cplusplus)
extern "C" {
#endif

//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION
#if  !defined(McGenDebug)
#define McGenDebug(a,b)
#endif 


#if !defined(MCGEN_TRACE_CONTEXT_DEF)
#define MCGEN_TRACE_CONTEXT_DEF
typedef struct _MCGEN_TRACE_CONTEXT
{
    TRACEHANDLE     RegistrationHandle;
    TRACEHANDLE     Logger;
    ULONGLONG       MatchAnyKeyword;
    ULONGLONG       MatchAllKeyword;
    ULONG           Flags;
    ULONG           IsEnabled;
    UCHAR           Level; 
    UCHAR           Reserve;
} MCGEN_TRACE_CONTEXT, *PMCGEN_TRACE_CONTEXT;
#endif

#if !defined(MCGEN_EVENT_ENABLED_DEF)
#define MCGEN_EVENT_ENABLED_DEF
FORCEINLINE
BOOLEAN
McGenEventEnabled(
    __in PMCGEN_TRACE_CONTEXT EnableInfo,
    __in PCEVENT_DESCRIPTOR EventDescriptor
    )
{
    //
    // Check if the event Level is lower than the level at which
    // the channel is enabled.
    // If the event Level is 0 or the channel is enabled at level 0,
    // all levels are enabled.
    //

    if ((EventDescriptor->Level <= EnableInfo->Level) || // This also covers the case of Level == 0.
        (EnableInfo->Level == 0)) {

        //
        // Check if Keyword is enabled
        //

        if ((EventDescriptor->Keyword == (ULONGLONG)0) ||
            ((EventDescriptor->Keyword & EnableInfo->MatchAnyKeyword) &&
             ((EventDescriptor->Keyword & EnableInfo->MatchAllKeyword) == EnableInfo->MatchAllKeyword))) {
            return TRUE;
        }
    }

    return FALSE;

}
#endif


//
// EnableCheckMacro
//
#ifndef MCGEN_ENABLE_CHECK
#define MCGEN_ENABLE_CHECK(Context, Descriptor) (Context.IsEnabled &&  McGenEventEnabled(&Context, &Descriptor))
#endif

#if !defined(MCGEN_CONTROL_CALLBACK)
#define MCGEN_CONTROL_CALLBACK

DECLSPEC_NOINLINE __inline
VOID
__stdcall
McGenControlCallbackV2(
    __in LPCGUID SourceId,
    __in ULONG ControlCode,
    __in UCHAR Level,
    __in ULONGLONG MatchAnyKeyword,
    __in ULONGLONG MatchAllKeyword,
    __in_opt PEVENT_FILTER_DESCRIPTOR FilterData,
    __inout_opt PVOID CallbackContext
    )
/*++

Routine Description:

    This is the notification callback for Vista.

Arguments:

    SourceId - The GUID that identifies the session that enabled the provider. 

    ControlCode - The parameter indicates whether the provider 
                  is being enabled or disabled.

    Level - The level at which the event is enabled.

    MatchAnyKeyword - The bitmask of keywords that the provider uses to 
                      determine the category of events that it writes.

    MatchAllKeyword - This bitmask additionally restricts the category 
                      of events that the provider writes. 

    FilterData - The provider-defined data.

    CallbackContext - The context of the callback that is defined when the provider 
                      called EtwRegister to register itself.

Remarks:

    ETW calls this function to notify provider of enable/disable

--*/
{
    PMCGEN_TRACE_CONTEXT Ctx = (PMCGEN_TRACE_CONTEXT)CallbackContext;
#ifndef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    UNREFERENCED_PARAMETER(SourceId);
    UNREFERENCED_PARAMETER(FilterData);
#endif

    if (Ctx == NULL) {
        return;
    }

    switch (ControlCode) {

        case EVENT_CONTROL_CODE_ENABLE_PROVIDER:
            Ctx->Level = Level;
            Ctx->MatchAnyKeyword = MatchAnyKeyword;
            Ctx->MatchAllKeyword = MatchAllKeyword;
            Ctx->IsEnabled = EVENT_CONTROL_CODE_ENABLE_PROVIDER;
            break;

        case EVENT_CONTROL_CODE_DISABLE_PROVIDER:
            Ctx->IsEnabled = EVENT_CONTROL_CODE_DISABLE_PROVIDER;
            Ctx->Level = 0;
            Ctx->MatchAnyKeyword = 0;
            Ctx->MatchAllKeyword = 0;
            break;
 
        default:
            break;
    }

#ifdef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    //
    // Call user defined callback
    //
    MCGEN_PRIVATE_ENABLE_CALLBACK_V2(
        SourceId,
        ControlCode,
        Level,
        MatchAnyKeyword,
        MatchAllKeyword,
        FilterData,
        CallbackContext
        );
#endif
   
    return;
}

#endif
#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION
//+
// Provider MySQLWindowsAuditProvider Event Count 5
//+
EXTERN_C __declspec(selectany) const GUID MYSQL_WINDOWS_AUDIT_PROVIDER = {0x566e77cb, 0xdc32, 0x4b2d, {0xa0, 0xca, 0x01, 0xcd, 0xf9, 0xbe, 0xc0, 0x31}};

//
// Channel
//
#define MYSQL_WINDOWS_AUDIT 0x10

//
// Event Descriptors
//
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Connect = {0x1, 0x1, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define Connect_value 0x1
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Disconnect = {0x2, 0x1, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define Disconnect_value 0x2
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Change = {0x3, 0x1, 0x10, 0x4, 0x0, 0x0, 0x8000000000000000};
#define Change_value 0x3
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Error = {0x4, 0x1, 0x10, 0x2, 0x0, 0x0, 0x8000000000000000};
#define Error_value 0x4
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ActiveChanged = {0x5, 0x1, 0x10, 0x3, 0x0, 0x0, 0x8000000000000000};
#define ActiveChanged_value 0x5

//
// Note on Generate Code from Manifest Windows Vista and above
//
//Structures :  are handled as a size and pointer pairs. The macro for the event will have an extra 
//parameter for the size in bytes of the structure. Make sure that your structures have no extra padding.
//
//Strings: There are several cases that can be described in the manifest. For array of variable length 
//strings, the generated code will take the count of characters for the whole array as an input parameter. 
//
//SID No support for array of SIDs, the macro will take a pointer to the SID and use appropriate 
//GetLengthSid function to get the length.
//

//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Globals 
//

EXTERN_C __declspec(selectany) REGHANDLE MySQLWindowsAuditProviderHandle = (REGHANDLE)0;

EXTERN_C __declspec(selectany) MCGEN_TRACE_CONTEXT MYSQL_WINDOWS_AUDIT_PROVIDER_Context = {0};

#if !defined(McGenEventRegisterUnregister)
#define McGenEventRegisterUnregister
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventRegister(
    __in LPCGUID ProviderId,
    __in_opt PENABLECALLBACK EnableCallback,
    __in_opt PVOID CallbackContext,
    __inout PREGHANDLE RegHandle
    )
/*++

Routine Description:

    This function register the provider with ETW USER mode.

Arguments:
    ProviderId - Provider Id to be register with ETW.

    EnableCallback - Callback to be used.

    CallbackContext - Context for this provider.

    RegHandle - Pointer to Registration handle.

Remarks:

    If the handle != NULL will return ERROR_SUCCESS

--*/
{
    ULONG Error;


    if (*RegHandle) {
        //
        // already registered
        //
        return ERROR_SUCCESS;
    }

    Error = EventRegister( ProviderId, EnableCallback, CallbackContext, RegHandle); 

    return Error;
}


DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventUnregister(__inout PREGHANDLE RegHandle)
/*++

Routine Description:

    Unregister from ETW USER mode

Arguments:
            RegHandle this is the pointer to the provider context
Remarks:
            If Provider has not register RegHandle = NULL,
            return ERROR_SUCCESS
--*/
{
    ULONG Error;


    if(!(*RegHandle)) {
        //
        // Provider has not registerd
        //
        return ERROR_SUCCESS;
    }

    Error = EventUnregister(*RegHandle); 
    *RegHandle = (REGHANDLE)0;
    
    return Error;
}
#endif
//
// Register with ETW Vista +
//
#ifndef EventRegisterMySQLWindowsAuditProvider
#define EventRegisterMySQLWindowsAuditProvider() McGenEventRegister(&MYSQL_WINDOWS_AUDIT_PROVIDER, McGenControlCallbackV2, &MYSQL_WINDOWS_AUDIT_PROVIDER_Context, &MySQLWindowsAuditProviderHandle) 
#endif

//
// UnRegister with ETW
//
#ifndef EventUnregisterMySQLWindowsAuditProvider
#define EventUnregisterMySQLWindowsAuditProvider() McGenEventUnregister(&MySQLWindowsAuditProviderHandle) 
#endif

//
// Event Macro for Connect
//
#define EventWriteConnect(status, user, host, ip, database)\
        MCGEN_ENABLE_CHECK(MYSQL_WINDOWS_AUDIT_PROVIDER_Context, Connect) ?\
        Template_dssss(MySQLWindowsAuditProviderHandle, &Connect, status, user, host, ip, database)\
        : ERROR_SUCCESS\

//
// Event Macro for Disconnect
//
#define EventWriteDisconnect(status)\
        MCGEN_ENABLE_CHECK(MYSQL_WINDOWS_AUDIT_PROVIDER_Context, Disconnect) ?\
        Template_d(MySQLWindowsAuditProviderHandle, &Disconnect, status)\
        : ERROR_SUCCESS\

//
// Event Macro for Change
//
#define EventWriteChange(status, user, host, ip, database)\
        MCGEN_ENABLE_CHECK(MYSQL_WINDOWS_AUDIT_PROVIDER_Context, Change) ?\
        Template_dssss(MySQLWindowsAuditProviderHandle, &Change, status, user, host, ip, database)\
        : ERROR_SUCCESS\

//
// Event Macro for Error
//
#define EventWriteError(status, user, host, ip, database)\
        MCGEN_ENABLE_CHECK(MYSQL_WINDOWS_AUDIT_PROVIDER_Context, Error) ?\
        Template_dssss(MySQLWindowsAuditProviderHandle, &Error, status, user, host, ip, database)\
        : ERROR_SUCCESS\

//
// Event Macro for ActiveChanged
//
#define EventWriteActiveChanged(var, active)\
        MCGEN_ENABLE_CHECK(MYSQL_WINDOWS_AUDIT_PROVIDER_Context, ActiveChanged) ?\
        Template_st(MySQLWindowsAuditProviderHandle, &ActiveChanged, var, active)\
        : ERROR_SUCCESS\

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION


//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Template Functions 
//
//
//Template from manifest : ConnectionTemplate
//
#ifndef Template_dssss_def
#define Template_dssss_def
ETW_INLINE
ULONG
Template_dssss(
    __in REGHANDLE RegHandle,
    __in PCEVENT_DESCRIPTOR Descriptor,
    __in const signed int  status,
    __in_opt LPCSTR  user,
    __in_opt LPCSTR  host,
    __in_opt LPCSTR  ip,
    __in_opt LPCSTR  database
    )
{
#define ARGUMENT_COUNT_dssss 5

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_dssss];

    EventDataDescCreate(&EventData[0], &status, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[1], 
                        (user != NULL) ? user : "NULL",
                        (user != NULL) ? (ULONG)((strlen(user) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], 
                        (host != NULL) ? host : "NULL",
                        (host != NULL) ? (ULONG)((strlen(host) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[3], 
                        (ip != NULL) ? ip : "NULL",
                        (ip != NULL) ? (ULONG)((strlen(ip) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[4], 
                        (database != NULL) ? database : "NULL",
                        (database != NULL) ? (ULONG)((strlen(database) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_dssss, EventData);
}
#endif

//
//Template from manifest : ResultTemplate
//
#ifndef Template_d_def
#define Template_d_def
ETW_INLINE
ULONG
Template_d(
    __in REGHANDLE RegHandle,
    __in PCEVENT_DESCRIPTOR Descriptor,
    __in const signed int  status
    )
{
#define ARGUMENT_COUNT_d 1

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_d];

    EventDataDescCreate(&EventData[0], &status, sizeof(const signed int)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_d, EventData);
}
#endif

//
//Template from manifest : BooleanUpdateTemplate
//
#ifndef Template_st_def
#define Template_st_def
ETW_INLINE
ULONG
Template_st(
    __in REGHANDLE RegHandle,
    __in PCEVENT_DESCRIPTOR Descriptor,
    __in_opt LPCSTR  var,
    __in const BOOL  active
    )
{
#define ARGUMENT_COUNT_st 2

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_st];

    EventDataDescCreate(&EventData[0], 
                        (var != NULL) ? var : "NULL",
                        (var != NULL) ? (ULONG)((strlen(var) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], &active, sizeof(const BOOL)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_st, EventData);
}
#endif

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

#if defined(__cplusplus)
};
#endif

#define MSG_level_Error                      0x50000002L
#define MSG_level_Warning                    0x50000003L
#define MSG_level_Informational              0x50000004L
#define MSG_MySQLWindowsAudit_channel_MYSQL_WINDOWS_AUDIT_message 0x90000001L
#define MSG_MySQLWindowsAuditProvider_event_1_message 0xB0010001L
#define MSG_MySQLWindowsAuditProvider_event_2_message 0xB0010002L
#define MSG_MySQLWindowsAuditProvider_event_3_message 0xB0010003L
#define MSG_MySQLWindowsAuditProvider_event_4_message 0xB0010004L
#define MSG_MySQLWindowsAuditProvider_event_5_message 0xB0010005L
